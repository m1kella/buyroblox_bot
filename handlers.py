from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from database import Database
import asyncio
import logging
from telegram import InputMediaPhoto
from datetime import datetime

logger = logging.getLogger(__name__)
db = Database()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 5

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å–∫–∏–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""

    skins = db.get_all_skins()

    if not skins:
        await update.message.reply_text("üòî –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(skins) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    current_skins = skins[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
    catalog_text = f"üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Å–∫–∏–Ω–æ–≤* (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"

    for skin in current_skins:
        rarity_emoji = {
            'Legendary': '‚ù§Ô∏è',
            'Godly': 'ü©∑',
            'Ancient': 'üíú',
        }.get(skin['rarity'], 'ü§ç')

        catalog_text += (
            f"üÜî {skin['skin_id']} | {rarity_emoji} *{skin['name']}* | *{skin['rarity']}* | {skin['price']} ‚ÇΩ\n"
            #f"üìù {skin['description']}\n"
            #f"üí∞ –¶–µ–Ω–∞: {skin['price']} ‚ÇΩ\n"
        )

    catalog_text += f"\n`/skin ID` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–Ω–µ\n"
    catalog_text += f"`/photo ID` - —Ñ–æ—Ç–æ —Å–∫–∏–Ω–∞\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = []
    for skin in current_skins:
        keyboard.append([
            InlineKeyboardButton(
                f"‚ûï {skin['name']} | {skin['rarity']}",
                callback_data=f"cart_add_{skin['skin_id']}"
            )
        ])

    #–ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
        pagination_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
    cart_count = db.get_cart_count(update.effective_user.id)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})", callback_data="view_cart")])
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–∫–∏–Ω–æ–≤", callback_data="search_skins")])
    keyboard.append([InlineKeyboardButton("üì¶ –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")])
    keyboard.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                catalog_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                catalog_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_catalog: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="catalog")]
                ])
            )

async def show_catalog_from_button(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º fake update –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ show_catalog
        class FakeUpdate:
            def __init__(self, query):
                self.callback_query = query
                self.effective_user = query.from_user

        fake_update = FakeUpdate(query)
        await show_catalog(fake_update, context, page=0)
    except Exception as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_catalog_from_button: {e}")
        await show_catalog_direct(query, context)

async def show_catalog_direct(query, context):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    user_id = query.from_user.id
    skins = db.get_all_skins()

    if not skins:
        await query.edit_message_text("üòî –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤")
        return

    ITEMS_PER_PAGE = 5
    total_pages = (len(skins) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    current_skins = skins[0:ITEMS_PER_PAGE]

    catalog_text = f"üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Å–∫–∏–Ω–æ–≤* (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages})\n\n"

    for skin in current_skins:
        rarity_emoji = {
            'Legendary': '‚ù§Ô∏è',
            'Godly': 'ü©∑',
            'Ancient': 'üíú',
        }.get(skin['rarity'], 'ü§ç')

        catalog_text += f"üÜî {skin['skin_id']} | {rarity_emoji} *{skin['name']}* | *{skin['rarity']}* | {skin['price']} ‚ÇΩ\n"

    keyboard = []

    for skin in current_skins:
        keyboard.append([
            InlineKeyboardButton(
                f"üõí [{skin['skin_id']}] {skin['name']}",
                callback_data=f"cart_add_{skin['skin_id']}"
            )
        ])

    pagination_buttons = []
    if total_pages > 1:
        pagination_buttons.append(InlineKeyboardButton("1/{}".format(total_pages), callback_data="current_page"))
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_1"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    cart_count = db.get_cart_count(user_id)

    keyboard.append([InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})", callback_data="view_cart")])
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–∫–∏–Ω–æ–≤", callback_data="search_skins")])
    keyboard.append([InlineKeyboardButton("üì¶ –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")])
    keyboard.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")])

    await query.edit_message_text(
        catalog_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    if callback_data.startswith('buy_'):
        skin_id = int(callback_data.split('_')[1])
        await process_purchase(query, skin_id, user_id)

    elif callback_data.startswith('page_'):
        page = int(callback_data.split('_')[1])
        await show_catalog(update, context, page)

    elif callback_data == 'inventory':
        await show_inventory(query, user_id)

    elif callback_data == 'balance':
        await show_balance(query, user_id)

    elif callback_data == 'search_skins':
        await start_search(query, context)

    elif callback_data == 'catalog':
        await return_to_catalog_final(query, user_id)

    elif callback_data.startswith('search_page_'):
        parts = callback_data.split('_')
        page = int(parts[2])
        search_term = '_'.join(parts[3:])
        found_skins = db.search_skins(search_term)
        await show_search_results(update, context, found_skins, search_term, page)

    elif callback_data.startswith('cart_add_'):
        skin_id = int(callback_data.split('_')[2])
        await add_to_cart(query, user_id, skin_id)

    elif callback_data == 'view_cart':
        await show_cart(query, user_id)

    elif callback_data.startswith('cart_remove_'):
        skin_id = int(callback_data.split('_')[2])
        await remove_from_cart(query, user_id, skin_id)

    elif callback_data == 'clear_cart':
        await clear_cart(query, user_id)

    elif callback_data == 'confirm_purchase':
        await confirm_purchase(query, context, user_id)

    elif callback_data == 'already_in_cart':
        await query.answer("‚úÖ –≠—Ç–æ—Ç —Å–∫–∏–Ω —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)

    elif callback_data.startswith('withdraw_'):
        skin_id = int(callback_data.split('_')[1])
        await withdraw_skin(query, user_id, skin_id)

    elif callback_data.startswith('confirm_withdraw_'):
        skin_id = int(callback_data.split('_')[2])
        await confirm_withdraw_skin(query, context, user_id, skin_id)

    elif callback_data.startswith('inv_page_'):
        page = int(callback_data.split('_')[2])
        await show_inventory(query, user_id, page)

    elif callback_data.startswith('view_photo_'):
        skin_id = int(callback_data.split('_')[2])
        await show_photo_only(query, skin_id)

    elif callback_data.startswith('skin_info_'):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–Ω–µ –∏–∑ —Ñ–æ—Ç–æ
        skin_id = int(callback_data.split('_')[2])
        await show_skin_info(query, skin_id, user_id)

# -----------------------–û–ë–´–ß–ù–´–ï-–ú–ï–¢–û–î–´------------------------- #

#–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞
async def process_purchase(query, skin_id, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞"""
    skin = db.get_skin_by_id(skin_id)
    user = db.get_user(user_id)

    if not skin:
        await query.answer("‚ùå –°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ /start", show_alert=True)
        return

    if user['balance'] < skin['price']:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ\n"
            f"üíµ –¶–µ–Ω–∞ —Å–∫–∏–Ω–∞: {skin['price']} ‚ÇΩ\n"
            f"üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {skin['price'] - user['balance']} ‚ÇΩ\n\n"
            f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @m1kellaa",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://t.me/m1kellaa")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")]
            ])
        )
        return

    if skin['quantity'] <= 0:
        await query.edit_message_text(
            "‚ùå –≠—Ç–æ—Ç —Å–∫–∏–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")]
            ])
        )
        return

    success = db.add_to_inventory(user_id, skin_id)

    if success:
        db.update_user_balance(user_id, -skin['price'])
        db.add_transaction(
            user_id=user_id,
            amount=-skin['price'],
            transaction_type='purchase',
            description=f"–ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞: {skin['name']}"
        )

        await query.edit_message_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
            f"‚úÖ –¢—ã –ø—Ä–∏–æ–±—Ä–µ–ª: *{skin['name']}*\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {skin['price']} ‚ÇΩ\n\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user['balance'] - skin['price']} ‚ÇΩ\n\n"
            f"–°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¶ –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ]),
            parse_mode='Markdown'
        )
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Å–∫–∏–Ω",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")]
            ])
        )

#–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_inventory(query, user_id, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    inventory = db.get_inventory_with_details(user_id)

    if not inventory:
        await query.edit_message_text(
            "üì¶ –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç\n\n"
            "–ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–∫–∏–Ω—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ])
        )
        return

    ITEMS_PER_PAGE = 5
    total_pages = (len(inventory) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    current_items = inventory[start_idx:end_idx]

    inventory_text = f"üì¶ *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–∫–∏–Ω–æ–≤* (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"

    for item in current_items:
        rarity_emoji = {
            'Legendary': '‚ù§Ô∏è',
            'Godly': 'ü©∑',
            'Ancient': 'üíú',
        }.get(item['rarity'], 'ü§ç')

        inventory_text += f"{rarity_emoji} *{item['name']}* | *{item['rarity']}* | {item['price']} ‚ÇΩ\n"
        #inventory_text += f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {item['rarity']}\n"
        #inventory_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['price']} ‚ÇΩ\n"
        inventory_text += f"üïê –ö—É–ø–ª–µ–Ω: {item['purchased_at'][:10]}\n\n"

    keyboard = []

    for item in current_items:
        keyboard.append([
            InlineKeyboardButton(f"üéÆ –ó–∞–±—Ä–∞—Ç—å {item['name']}", callback_data=f"withdraw_{item['skin_id']}")
        ])

    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"inv_page_{page - 1}"))

    pagination_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="inv_current"))

    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"inv_page_{page + 1}"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    keyboard.append([InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")])
    keyboard.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")])

    await query.edit_message_text(
        inventory_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

#–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_balance(query, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_user(user_id)

    if user:
        balance_text = (
            f"üí∞ *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:* {user['balance']} ‚ÇΩ\n\n"
            f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @m1kellaa"
        )

        await query.edit_message_text(
            balance_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                [InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")]
            ])
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ])
        )

async def start_search(query, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Å–∫–∏–Ω–æ–≤"""
    await query.edit_message_text(
        "üîç *–ü–æ–∏—Å–∫ —Å–∫–∏–Ω–æ–≤*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚Ä¢ `–Ω–æ–∂` - –Ω–∞–π–¥–µ—Ç –≤—Å–µ –Ω–æ–∂–∏\n"
        "‚Ä¢ `ice` - –Ω–∞–π–¥–µ—Ç Iceflake, Icebeam –∏ —Ç.–¥.\n"
        "‚Ä¢ `legendary` - –Ω–∞–π–¥–µ—Ç –≤—Å–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        parse_mode='Markdown'
    )

    context.user_data['waiting_for_search'] = True

async def show_search_results(update, context, skins, search_term, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    ITEMS_PER_PAGE = 5
    total_pages = (len(skins) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    current_skins = skins[start_idx:end_idx]

    search_text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"{search_term}\"*\n"
    search_text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∫–∏–Ω–æ–≤: {len(skins)} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"

    for skin in current_skins:
        rarity_emoji = {
            'Legendary': '‚ù§Ô∏è',
            'Godly': 'ü©∑',
            'Ancient': 'üíú',
        }.get(skin['rarity'], 'ü§ç')

        search_text += (
            f"üÜî '{skin['skin_id']}' | {rarity_emoji} *{skin['name']}* | *{skin['rarity']}* | {skin['price']} ‚ÇΩ\n"
        )

    keyboard = []

    for skin in current_skins:
        keyboard.append([
            InlineKeyboardButton(
                f"üõí –í –∫–æ—Ä–∑–∏–Ω—É - {skin['name']}",
                callback_data=f"cart_add_{skin['skin_id']}"
            )
        ])

    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_page_{page - 1}_{search_term}"))

    pagination_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        pagination_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_page_{page + 1}_{search_term}"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    keyboard.append([InlineKeyboardButton("üõçÔ∏è –í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")])
    keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_skins")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            search_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            search_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def return_to_catalog_final(query, user_id):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥"""
    try:
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥
        await show_catalog_direct(query, None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥
        await query.message.reply_text(
            "üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Å–∫–∏–Ω–æ–≤*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¶ –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")]
            ]),
            parse_mode='Markdown'
        )

async def show_photo_only(query, skin_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å–∫–∏–Ω–∞"""
    skin = db.get_skin_by_id(skin_id)

    if not skin or not skin.get('image_url'):
        await query.answer("‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    try:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        if not query.message.photo:
            await query.message.reply_photo(
                photo=skin['image_url'],
                caption=f"üéÆ {skin['name']} - {skin['rarity']}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data=f"skin_info_{skin_id}")]
                ])
            )
        else:
            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await query.edit_message_media(
                media=InputMediaPhoto(
                    media=skin['image_url'],
                    caption=f"üéÆ {skin['name']} - {skin['rarity']}"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data=f"skin_info_{skin_id}")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", show_alert=True)

async def show_skin_info(query, skin_id, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–Ω–µ –∏–∑ callback (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ)"""
    skin = db.get_skin_by_id(skin_id)

    if not skin:
        await query.answer("‚ùå –°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    rarity_emoji = {
        'Legendary': '‚ù§Ô∏è',
        'Godly': 'ü©∑',
        'Ancient': 'üíú',
    }.get(skin['rarity'], 'ü§ç')

    skin_text = (
        f"{rarity_emoji} *{skin['name']}*\n\n"
        f"üíé *–†–µ–¥–∫–æ—Å—Ç—å:* {skin['rarity']}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {skin['price']} ‚ÇΩ\n"
        f"üì¶ *–í –Ω–∞–ª–∏—á–∏–∏:* {skin['quantity']} —à—Ç.\n"
    )

    #if skin['description']:
        #skin_text += f"\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {skin['description']}\n"

    if skin.get('image_url'):
        skin_text += f"\nüì∏ *–§–æ—Ç–æ:* `/photo {skin_id}`"

    keyboard = [
        [
            InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"cart_add_{skin_id}"),
            InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"buy_{skin_id}")
        ]
    ]

    if skin.get('image_url'):
        keyboard.append([InlineKeyboardButton("üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ", callback_data=f"view_photo_{skin_id}")])

    keyboard.append([InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")])

    await query.edit_message_caption(
        caption=skin_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# -----------------------–ú–ï–¢–û–î–´-–ö–û–†–ó–ò–ù–´------------------------- #

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_cart(query, user_id, skin_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–∏–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    skin = db.get_skin_by_id(skin_id)

    if not skin:
        await query.answer("‚ùå –°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if skin['quantity'] <= 0:
        await query.answer("‚ùå –≠—Ç–æ—Ç —Å–∫–∏–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        return

    success = db.add_to_cart(user_id, skin_id)

    if success:
        cart_count = db.get_cart_count(user_id)

        await query.answer(
            f"‚úÖ {skin['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"üì¶ –í –∫–æ—Ä–∑–∏–Ω–µ: {cart_count} —Ç–æ–≤–∞—Ä–æ–≤",
            show_alert=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        try:
            original_markup = query.message.reply_markup
            new_keyboard = []
            for row in original_markup.inline_keyboard:
                new_row = []
                for button in row:
                    if button.callback_data == "view_cart":
                        new_row.append(InlineKeyboardButton(
                            f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})",
                            callback_data="view_cart"
                        ))
                    else:
                        new_row.append(button)
                new_keyboard.append(new_row)

            await query.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(new_keyboard)
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    else:
        await query.answer("‚ùå –≠—Ç–æ—Ç —Å–∫–∏–Ω —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)

#–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_cart(query, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cart_items = db.get_user_cart(user_id)
    user = db.get_user(user_id)

    if not cart_items:
        await query.edit_message_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ])
        )
        return

    total_price = sum(item['price'] for item in cart_items)

    cart_text = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n\n"

    for item in cart_items:
        rarity_emoji = {
            'Legendary': '‚ù§Ô∏è',
            'Godly': 'ü©∑',
            'Ancient': 'üíú',
        }.get(item['rarity'], 'ü§ç')

        cart_text += f"{rarity_emoji} {item['name']} | {item['rarity']} | {item['price']} ‚ÇΩ\n\n"
        #cart_text += f"üí∞ {item['price']} ‚ÇΩ\n"
        #cart_text += f"üé≤ {item['rarity']}\n\n"

    cart_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ\n"
    cart_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ\n\n"

    if user['balance'] < total_price:
        cart_text += "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"

    keyboard = []

    for item in cart_items:
        keyboard.append([
            InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']}", callback_data=f"cart_remove_{item['skin_id']}")
        ])

    if cart_items:
        if user['balance'] >= total_price:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="confirm_purchase")])
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")])

    keyboard.append([InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")])
    keyboard.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")])

    await query.edit_message_text(
        cart_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def remove_from_cart(query, user_id, skin_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–∫–∏–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    success = db.remove_from_cart(user_id, skin_id)

    if success:
        await query.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        await show_cart(query, user_id)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

async def clear_cart(query, user_id):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É"""
    success = db.clear_user_cart(user_id)

    if success:
        await query.message.reply_text(
            "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ])
        )
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

async def confirm_purchase(query, context, user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_items = db.get_user_cart(user_id)
    user = db.get_user(user_id)

    if not cart_items:
        await query.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    total_price = sum(item['price'] for item in cart_items)

    if user['balance'] < total_price:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    for item in cart_items:
        if item['quantity'] <= 0:
            await query.message.reply_text(
                f"‚ùå –°–∫–∏–Ω \"{item['name']}\" –∑–∞–∫–æ–Ω—á–∏–ª—Å—è\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõí –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")]
                ])
            )
            return

    purchased_skins = []
    for item in cart_items:
        success = db.add_to_inventory(user_id, item['skin_id'])
        if success:
            purchased_skins.append(item['name'])
            db.update_user_balance(user_id, -item['price'])
            db.add_transaction(
                user_id=user_id,
                amount=-item['price'],
                transaction_type='purchase',
                description=f"–ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞: {item['name']}"
            )

    db.clear_user_cart(user_id)

    purchase_text = "üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
    purchase_text += f"‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã:\n\n"
    for skin_name in purchased_skins:
        purchase_text += f"‚Ä¢ {skin_name}\n"

    purchase_text += f"\nüíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} ‚ÇΩ\n"
    purchase_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user['balance'] - total_price} ‚ÇΩ\n\n"
    purchase_text += "–°–∫–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"

    await query.message.reply_text(
        purchase_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¶ –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
        ]),
        parse_mode='Markdown'
    )

    # üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ê–î–ú–ò–ù–ê –û –ü–û–ö–£–ü–ö–ï
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    await send_purchase_admin_notification(
        bot=context.bot,  # –ü–µ—Ä–µ–¥–∞–µ–º bot –∏–∑ context
        user_name=query.from_user.first_name,
        user_username=f"@{query.from_user.username}" if query.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
        user_id=user_id,
        skins=purchased_skins,
        total_price=total_price,
        time=current_time
    )

# -----------------------–í–´–í–û–î-–ü–†–ï–î–ú–ï–¢–û–í------------------------- #

async def withdraw_skin(query, user_id, skin_id):
    """–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ —Å–∫–∏–Ω–∞ –≤ Mystery Murder 2"""
    skin = db.get_skin_by_id(skin_id)
    user = db.get_user(user_id)

    if not skin:
        await query.answer("‚ùå –°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await query.message.reply_text(
        f"üéÆ *–í—ã–≤–æ–¥ —Å–∫–∏–Ω–∞ –≤ Mystery Murder 2*\n\n"
        f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–Ω–µ:*\n\n"
        f"üî™ {skin['name']} | {skin['rarity']} | {skin['price']}\n\n"
        #f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {skin['rarity']}\n"
        #f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {skin['price']} ‚ÇΩ\n\n"

        f"üìû *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω:*\n"
        f"1. –ù–∞–ø–∏—à–∏—Ç–µ @m1kellaa –≤ –õ–°\n"
        f"2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à @username –≤ Roblox\n"
        f"3. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞: *{skin['name']}*\n"
        f"4. –í–∞—à User ID: `{user_id}`\n\n"

        f"üéØ *–£—Å–ª–æ–≤–∏—è —Ç—Ä–µ–π–¥–∞ –≤ MM2:*\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 10+ –≤ Mystery Murder 2\n"
        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç Roblox 13+\n\n"

        f"‚è± *–í—Ä–µ–º—è –≤—ã–¥–∞—á–∏:* 5-15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
        f"*–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤:* _09:00 - 21:00 –ú–°–ö_",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –¥–ª—è —Ç—Ä–µ–π–¥–∞", url="https://t.me/m1kellaa"),
                InlineKeyboardButton("‚úÖ –Ø –ø–æ–ª—É—á–∏–ª —Å–∫–∏–Ω", callback_data=f"confirm_withdraw_{skin_id}")
            ],
            [
                InlineKeyboardButton("üì¶ –ù–∞–∑–∞–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")
            ]
        ])
    )

async def confirm_withdraw_skin(query, context, user_id, skin_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–Ω–∞ –≤ MM2"""
    skin = db.get_skin_by_id(skin_id)

    success = db.remove_from_inventory_mm2(user_id, skin_id)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M')

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.message.reply_text(
            f"üéâ *–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!*\n\n"
            f"‚úÖ *{skin['name']}* –≤—ã–≤–µ–¥–µ–Ω –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç MM2\n\n"
            f"üìã *–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n\n"
            f"üî™ –°–∫–∏–Ω: {skin['name']}\n"
            f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {skin['rarity']}\n"
            #f"üë§ –ò–≥—Ä–æ–∫: {query.from_user.first_name}\n"
            f"üïê –í—Ä–µ–º—è: {current_time}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã –≤ Mystery Murder 2! üéÆüî™",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="catalog")],
                [InlineKeyboardButton("üì¶ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫–∏–Ω—ã", callback_data="inventory")]
            ])
        )

        # üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ê–î–ú–ò–ù–ê –û –í–´–í–û–î–ï
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        await send_admin_notification(
            bot=context.bot,  # –ü–µ—Ä–µ–¥–∞–µ–º bot –∏–∑ context
            user_name=query.from_user.first_name,
            user_username=f"@{query.from_user.username}" if query.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
            user_id=user_id,
            skin_name=skin['name'],
            skin_rarity=skin['rarity'],
            skin_price=skin['price'],
            time=current_time
        )

    else:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–Ω, –Ω–æ –≤–∏–¥–∏—Ç–µ —ç—Ç—É –æ—à–∏–±–∫—É,\n"
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url="https://t.me/m1kellaa")],
                [InlineKeyboardButton("üì¶ –ù–∞–∑–∞–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")]
            ])
        )

async def send_admin_notification(bot, user_name, user_username, user_id, skin_name, skin_rarity, skin_price, time):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –≤—ã–≤–æ–¥–µ —Å–∫–∏–Ω–∞"""
    try:
        from config import Config

        admin_message = (
            "üîî *–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –í—ã–≤–æ–¥ —Å–∫–∏–Ω–∞ –≤ MM2*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name} ({user_username})\n"
            f"üÜî User ID: `{user_id}`\n\n"
            f"üéÆ *–°–∫–∏–Ω:* {skin_name}\n"
            f"üíé *–†–µ–¥–∫–æ—Å—Ç—å:* {skin_rarity}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {skin_price} ‚ÇΩ\n\n"
            f"üïê *–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:* {time}\n"
            f"‚úÖ *–°—Ç–∞—Ç—É—Å:* –°–∫–∏–Ω –≤—ã–≤–µ–¥–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=Config.ADMIN_ID_INT,
            text=admin_message,
            parse_mode='Markdown'
        )

        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –æ –≤—ã–≤–æ–¥–µ —Å–∫–∏–Ω–∞ {skin_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def send_purchase_admin_notification(bot, user_name, user_username, user_id, skins, total_price, time):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–∫—É–ø–∫–µ"""
    try:
        from config import Config

        skins_list = "\n".join([f"‚Ä¢ {skin}" for skin in skins])

        admin_message = (
            "üõí *–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name} ({user_username})\n"
            f"üÜî User ID: `{user_id}`\n\n"
            f"üéÆ *–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã:*\n{skins_list}\n\n"
            f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* {total_price} ‚ÇΩ\n"
            f"üïê *–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏:* {time}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=Config.ADMIN_ID_INT,
            text=admin_message,
            parse_mode='Markdown'
        )

        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∞–¥–º–∏–Ω—É: {e}")
