import telegram
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from config import Config
from database import Database
from handlers import show_catalog, button_handler, show_inventory
from admin_handlers import admin_panel, admin_button_handler
from flask import Flask
import threading
import os

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Bot is running!"

@app.route('/health')
def health():
    return "OK"

def run_web_server():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_errors.log')  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
    ]
)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö noisy –º–æ–¥—É–ª–µ–π
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–æ—Ç–∞"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        from config import Config
        if Config.ADMIN_ID_INT:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:\n{context.error}"
            await context.bot.send_message(
                chat_id=Config.ADMIN_ID_INT,
                text=error_text
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

db = Database()

# ---------------------–ö–û–ú–ê–ù–î–´----------------------- #

async def start(update, context):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    user = update.effective_user

    db.add_user(user_id=user.id, username=user.username, first_name=user.first_name, last_name=user.last_name)

    await update.message.reply_html(
f"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! üëã\n"
f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤ MM2!\n\n"
f"üí∞ –¢–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 0 ‚ÇΩ\n"
f"üéÆ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Å–∫–∏–Ω—ã!\n\n"
f"–ù–∞–ø–∏—à–∏ /catalog, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥:\n"
f"–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –Ω–∞–ø–∏—à–∏ /help –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é\n\n"
f"üïò –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤: 09:00 - 21:00 –ú–°–ö"
    )

async def help_command(update, context):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/catalog - –∫–∞—Ç–∞–ª–æ–≥ —Å–∫–∏–Ω–æ–≤
/balance - –≤–∞—à –±–∞–ª–∞–Ω—Å
/inventory - –∫—É–ø–∏—Ç—å —Å–∫–∏–Ω

–í –∫–∞—Ç–∞–ª–æ–≥–µ —Ç—ã –º–æ–∂–µ—à—å:

‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã
‚Ä¢ –í–∏–¥–µ—Ç—å —Ü–µ–Ω—ã –∏ —Ä–µ–¥–∫–æ—Å—Ç—å
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å —Å–∫–∏–Ω—ã –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º

–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:

‚Ä¢ –ù–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã -> –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã @m1kellaa
‚Ä¢ –ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å
‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –õ–°
‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–∏ 5-10 –º–∏–Ω—É—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å /balance

–ö–∞–∫ –∑–∞–±—Ä–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:

‚Ä¢ –ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å 09:00 –¥–æ 21:00 –ú–°–ö
‚Ä¢ –ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ -> @m1kellaa
‚Ä¢ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–¥–∞—é—Ç—Å—è –ø—É—Ç–µ–º —Ç—Ä–µ–π–¥–∞ –≤–Ω—É—Ç—Ä–∏ MM2
‚Ä¢ –£—Å–ª–æ–≤–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞: 10 LVL –≤ MM2, –∞–∫–∫–∞—É–Ω—Ç Roblox 13+

–ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @m1kellaa"""

    await update.message.reply_html(help_text)

async def balance_command(update, context):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""

    user = update.effective_user
    user_data = db.get_user(user.id)

    if user_data:
        balance = user_data['balance']
        await update.message.reply_text(
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n\n"
            f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @m1kellaa"
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ /start")

async def inventory_command(update, context):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inventory"""

    from handlers import show_inventory
    user = update.effective_user

    # –°–æ–∑–¥–∞–µ–º fake query –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    class FakeQuery:
        def __init__(self, message):
            self.message = message

        async def edit_message_text(self, *args, **kwargs):
            await self.message.reply_text(*args, **kwargs)

    fake_query = FakeQuery(update.message)
    await show_inventory(fake_query, user.id)

async def photo_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å–∫–∏–Ω–∞ –ø–æ ID"""
    user_id = update.effective_user.id

    if not context.args:
        await update.message.reply_text(
            "üì∏ *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ —Å–∫–∏–Ω–∞*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "`/photo ID_—Å–∫–∏–Ω–∞`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/photo 1`\n\n"
            "ID —Å–∫–∏–Ω–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
            parse_mode='Markdown'
        )
        return

    try:
        skin_id = int(context.args[0])
        skin = db.get_skin_by_id(skin_id)

        if not skin:
            await update.message.reply_text("‚ùå –°–∫–∏–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if not skin.get('image_url') or not skin['image_url'].startswith(('http://', 'https://')):
            await update.message.reply_text(
                f"üéÆ *{skin['name']}*\n\n"
                f"‚ùå –§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
                f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {skin['rarity']}\n"
                f"üí∞ –¶–µ–Ω–∞: {skin['price']} ‚ÇΩ",
                parse_mode='Markdown'
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await update.message.reply_photo(
            photo=skin['image_url'],
            caption=(
                f"üéÆ *{skin['name']}*\n\n"
                f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {skin['rarity']}\n"
                f"üí∞ –¶–µ–Ω–∞: {skin['price']} ‚ÇΩ\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {skin['quantity']} —à—Ç.\n\n"
                f"üìù {skin['description']}"
            ),
            parse_mode='Markdown'
        )

    except ValueError:
        await update.message.reply_text("‚ùå ID —Å–∫–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")

async def skin_info_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–Ω–µ"""
    user_id = update.effective_user.id

    if not context.args:
        await update.message.reply_text(
            "üéÆ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–Ω–µ*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "`/skin ID_—Å–∫–∏–Ω–∞`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/skin 1`\n\n"
            "ID —Å–∫–∏–Ω–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
            parse_mode='Markdown'
        )
        return

    try:
        skin_id = int(context.args[0])
        skin = db.get_skin_by_id(skin_id)

        if not skin:
            await update.message.reply_text("‚ùå –°–∫–∏–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        rarity_emoji = {
            'Legendary': '‚ù§Ô∏è',
            'Godly': 'ü©∑',
            'Ancient': 'üíú',
        }.get(skin['rarity'], 'ü§ç')

        skin_text = (
            f"{rarity_emoji} *{skin['name']}*\n\n"
            f"üíé *–†–µ–¥–∫–æ—Å—Ç—å:* {skin['rarity']}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {skin['price']} ‚ÇΩ\n"
            f"üì¶ *–í –Ω–∞–ª–∏—á–∏–∏:* {skin['quantity']} —à—Ç.\n"
        )

        #if skin['description']:
            #skin_text += f"\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {skin['description']}\n"

        if skin.get('image_url'):
            skin_text += f"\nüì∏ *–§–æ—Ç–æ:* –î–æ—Å—Ç—É–ø–Ω–æ"

        keyboard = [
            [
                InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"cart_add_{skin_id}"),
                InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"buy_{skin_id}")
            ]
        ]

        if skin.get('image_url'):
            keyboard.append([InlineKeyboardButton("üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ", callback_data=f"view_photo_{skin_id}")])

        keyboard.append([InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")])

        await update.message.reply_text(
            skin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except ValueError:
        await update.message.reply_text("‚ùå ID —Å–∫–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–Ω–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# -----------------------–ê–î–ú–ò–ù-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò------------------------- #

async def handle_message(update, context):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å–∫–∏–Ω–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    if context.user_data.get('waiting_for_skin'):
        await process_skin_input(update, context, text)
        return

    # ‚≠ê‚≠ê –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ‚≠ê‚≠ê
    if context.user_data.get('waiting_for_search'):
        await process_search_query(update, context, text)
        return

    # ‚≠ê‚≠ê –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ‚≠ê‚≠ê
    if context.user_data.get('waiting_for_balance'):
        await process_balance_change(update, context, text)
        return

    if context.user_data.get('waiting_for_delete_skin'):
        await process_delete_skin(update, context, text)
        return

    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/catalog - –∫–∞—Ç–∞–ª–æ–≥ —Å–∫–∏–Ω–æ–≤\n"
        "/help - –ø–æ–º–æ—â—å"
    )

async def process_balance_change(update, context, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from admin_handlers import is_admin
    from database import Database

    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        parts = text.split('|')
        if len(parts) != 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 2 —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö |\n"
                "–§–æ—Ä–º–∞—Ç: user_id | –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å"
            )
            return

        target_user_id = int(parts[0].strip())
        new_balance = float(parts[1].strip())

        # –ò–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        db = Database()
        success = db.update_user_balance_directly(target_user_id, new_balance)

        if success:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            db.add_transaction(
                user_id=target_user_id,
                amount=new_balance,
                transaction_type='admin_adjustment',
                description=f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )

            await update.message.reply_text(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_balance} ‚ÇΩ"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –±–∞–ª–∞–Ω—Å - —á–∏—Å–ª–æ–º")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['waiting_for_balance'] = False

async def process_search_query(update, context, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    from database import Database
    from handlers import show_search_results

    search_term = text.strip()

    if not search_term:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    # –ò—â–µ–º —Å–∫–∏–Ω—ã
    db = Database()
    found_skins = db.search_skins(search_term)

    if not found_skins:
        await update.message.reply_text(
            f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_term}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            f"‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è"
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await show_search_results(update, context, found_skins, search_term)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['waiting_for_search'] = False

async def process_skin_input(update, context, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∏–Ω–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    from admin_handlers import is_admin
    from database import Database

    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ø–µ—Ä—å 7 —á–∞—Å—Ç–µ–π)
        parts = text.split('|')
        if len(parts) != 7:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 7 —á–∞—Å—Ç–µ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö |\n"
                "–§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Ü–µ–Ω–∞ | —Ä–µ–¥–∫–æ—Å—Ç—å | –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ | roblox_id | image_url"
            )
            return

        name = parts[0].strip()
        description = parts[1].strip()
        price = float(parts[2].strip())
        rarity = parts[3].strip()
        quantity = int(parts[4].strip())
        roblox_id = parts[5].strip()
        image_url = parts[6].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
        valid_rarities = ['Legendary', 'Godly', 'Ancient']
        if rarity not in valid_rarities:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_rarities)}"
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–Ω –≤ –±–∞–∑—É
        db = Database()
        success = db.add_skin(name, description, price, rarity, roblox_id, image_url, quantity)

        if success:
            await update.message.reply_text(
                f"‚úÖ –°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                f"–†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
                f"Roblox ID: {roblox_id}\n"
                f"–§–æ—Ç–æ: {'‚úÖ' if image_url else '‚ùå'}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫–∏–Ω–∞")

    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ü–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —á–∏—Å–ª–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    context.user_data['waiting_for_skin'] = False

async def process_delete_skin(update, context, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞"""
    from admin_handlers import is_admin
    from database import Database

    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        skin_id = int(text.strip())
        db = Database()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∫–∏–Ω
        skin = db.get_skin_by_id(skin_id)
        if not skin:
            await update.message.reply_text("‚ùå –°–∫–∏–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –£–¥–∞–ª—è–µ–º —Å–∫–∏–Ω
        with db.get_connection() as conn:
            conn.execute('DELETE FROM skins WHERE skin_id = ?', (skin_id,))
            conn.commit()

        await update.message.reply_text(
            f"‚úÖ –°–∫–∏–Ω '{skin['name']}' (ID: {skin_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
        )

    except ValueError:
        await update.message.reply_text("‚ùå ID —Å–∫–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    context.user_data['waiting_for_delete_skin'] = False

async def my_id(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    await update.message.reply_text(
        f"üÜî –¢–≤–æ–π ID: `{user.id}`\n"
        f"üë§ Username: @{user.username}\n"
        f"üìõ –ò–º—è: {user.first_name}",
        parse_mode='Markdown'
    )

# -----------------------–ó–ê–ü–£–°–ö-–ë–û–¢–ê------------------------- #

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = (
            Application.builder()
            .token(Config.BOT_TOKEN)
            .concurrent_updates(True)
            .build()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("catalog", show_catalog))
        application.add_handler(CommandHandler("inventory", inventory_command))
        application.add_handler(CommandHandler("admin", admin_panel))
        application.add_handler(CommandHandler("myid", my_id))
        application.add_handler(CommandHandler("photo", photo_command))
        application.add_handler(CommandHandler("skin", skin_info_command))
        application.add_handler(CommandHandler("delete_skin", delete_skin_command))

        # ‚≠ê‚≠ê –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω —Ö–µ–Ω–¥–ª–µ—Ä—ã, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ ‚≠ê‚≠ê
        application.add_handler(CallbackQueryHandler(admin_button_handler, pattern="^admin_"))
        application.add_handler(CallbackQueryHandler(button_handler))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        print("ü§ñ Starting bot with conflict protection...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        application.run_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            allowed_updates=['message', 'callback_query'],
            close_loop=False
        )
        
    except telegram.error.Conflict:
        print("‚ùå Conflict detected! Another bot instance is running.")
        print("üîÑ Waiting 30 seconds and restarting...")
        import time
        time.sleep(30)
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        
    except Exception as e:
        print(f"‚ùå Bot crashed: {e}")
        print("üîÑ Restarting in 10 seconds...")
        import time
        time.sleep(10)
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º

if __name__ == "__main__":
    main()
