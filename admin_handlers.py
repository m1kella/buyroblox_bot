from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from database import Database
from config import Config
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
db = Database()

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == Config.ADMIN_ID_INT

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
         InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
        [InlineKeyboardButton("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞–º–∏", callback_data="admin_skins"),
         InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω", callback_data="admin_add_skin")],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_change_balance")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def admin_panel_main(query):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton("üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
         InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
        [InlineKeyboardButton("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞–º–∏", callback_data="admin_skins"),
         InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω", callback_data="admin_add_skin")],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_change_balance")]
    ]

    await query.edit_message_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    callback_data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å timestamp
    if callback_data.startswith("admin_stats"):
        await show_admin_stats(query)
    elif callback_data.startswith("admin_detailed_stats"):
        await show_detailed_stats(query)
    elif callback_data == "admin_skins":
        await show_skin_management(query)
    elif callback_data == "admin_users":
        await show_user_management(query)
    elif callback_data == "admin_add_skin":
        await start_add_skin(query, context)
    elif callback_data == "admin_change_balance":
        await start_change_balance(query, context)
    elif callback_data == "admin_main":
        await admin_panel_main(query)
    elif callback_data == "catalog":
        from handlers import show_catalog_from_button
        await show_catalog_from_button(query, context)

async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    stats = db.get_bot_stats()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —Ä–∞–∑–Ω—ã–º
    import time
    timestamp = int(time.time())

    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üéÆ –í—Å–µ–≥–æ —Å–∫–∏–Ω–æ–≤: {stats['total_skins']}\n"
        f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {stats['total_purchases']}\n"
        f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_revenue']} ‚ÇΩ\n"
        f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
    )

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_stats_{timestamp}")],  # –î–æ–±–∞–≤–ª—è–µ–º timestamp
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]

    await query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_add_skin(query, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–Ω–∞"""
    await query.edit_message_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∏–Ω–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Ü–µ–Ω–∞ | —Ä–µ–¥–∫–æ—Å—Ç—å | –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ | roblox_id | image_url`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`–û–≥–Ω–µ–Ω–Ω—ã–π –º–µ—á | –ú–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ | 1500 | Godly | 5 | fire_sword_001 | https://example.com/fire.jpg`\n\n"
        "–†–µ–¥–∫–æ—Å—Ç–∏: Legendary, Godly, Ancient\n"
        "–î–ª—è —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        parse_mode='Markdown'
    )

    context.user_data['waiting_for_skin'] = True

async def show_detailed_stats(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = db.get_detailed_stats()

    import time
    timestamp = int(time.time())

    stats_text = f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    stats_text += f"üéÆ –í—Å–µ–≥–æ —Å–∫–∏–Ω–æ–≤: {stats['total_skins']}\n"
    stats_text += f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {stats['total_purchases']}\n"
    stats_text += f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_revenue']} ‚ÇΩ\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    stats_text += "üìà –ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:\n"
    for rarity_stat in stats['rarity_stats']:
        stats_text += f"‚Ä¢ {rarity_stat['rarity']}: {rarity_stat['count']} —Å–∫–∏–Ω–æ–≤\n"

    stats_text += "\nüèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user in enumerate(stats['top_users'][:5], 1):
        username = f"@{user['username']}" if user['username'] else user['first_name']
        stats_text += f"{i}. {username}: {user['balance']} ‚ÇΩ\n"

    stats_text += "\nüî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∫–∏–Ω—ã:\n"
    for i, skin in enumerate(stats['popular_skins'][:5], 1):
        stats_text += f"{i}. {skin['name']}: {skin['sales_count']} –ø—Ä–æ–¥–∞–∂\n"

    stats_text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_detailed_stats_{timestamp}")],
        [InlineKeyboardButton("üìà –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]

    await query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_user_management(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    users = db.get_all_users()

    user_text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"

    for user in users[:5]:
        user_text += f"üÜî {user['user_id']} | {user['first_name']}"
        if user['username']:
            user_text += f" (@{user['username']})"
        user_text += f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ\n\n"

    if len(users) > 5:
        user_text += f"... –∏ –µ—â–µ {len(users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

    keyboard = [
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_change_balance")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]

    await query.edit_message_text(
        user_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_change_balance(query, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    await query.edit_message_text(
        "üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "user_id | –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "123456789 | 1000\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å /myid"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞
    context.user_data['waiting_for_balance'] = True

async def show_skin_management(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞–º–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    skins = db.get_all_skins()

    skin_text = "üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞–º–∏\n\n"

    for skin in skins[:5]:
        skin_text += f"üÜî {skin['skin_id']} | {skin['name']}\n"
        skin_text += f"üí∞ {skin['price']} ‚ÇΩ | üé≤ {skin['rarity']}\n"
        skin_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {skin['quantity']}\n\n"

    if len(skins) > 5:
        skin_text += f"... –∏ –µ—â–µ {len(skins) - 5} —Å–∫–∏–Ω–æ–≤\n"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω", callback_data="admin_add_skin")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–Ω–æ–≤", callback_data="admin_detailed_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]

    await query.edit_message_text(
        skin_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
